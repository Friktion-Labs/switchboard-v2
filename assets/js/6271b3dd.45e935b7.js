"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6945],{5318:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return v}});var n=r(7378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),f=l(r),v=a,m=f["".concat(c,".").concat(v)]||f[v]||s[v]||i;return r?n.createElement(m,o(o({ref:t},p),{},{components:r})):n.createElement(m,o({ref:t},p))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7047:function(e,t,r){r.r(t),r.d(t,{assets:function(){return v},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return f},toc:function(){return m}});var n=r(5773),a=r(808),i=(r(7378),r(5318)),o=["components"],u={toc:[{value:"<code>sbv2 vrf:create QUEUEKEY</code>",id:"sbv2-vrfcreate-queuekey",level:2},{value:"<code>sbv2 vrf:create:example QUEUEKEY</code>",id:"sbv2-vrfcreateexample-queuekey",level:2},{value:"<code>sbv2 vrf:request VRFKEY</code>",id:"sbv2-vrfrequest-vrfkey",level:2}]};function c(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"create a Switchboard VRF Account"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrfcreate-queuekey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf:create QUEUEKEY"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrfcreateexample-queuekey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf:create:example QUEUEKEY"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrfrequest-vrfkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf:request VRFKEY")))),(0,i.kt)("h2",{id:"sbv2-vrfcreate-queuekey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf:create QUEUEKEY")),(0,i.kt)("p",null,"create a Switchboard VRF Account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf:create QUEUEKEY\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nOPTIONS\n  -a, --accountMeta=accountMeta    (required) account metas for VRF callback\n  -h, --help                       show CLI help\n\n  -k, --keypair=keypair            keypair that will pay for onchain transactions. defaults to new account authority if\n                                   no alternate authority provided\n\n  -s, --silent                     suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl              alternate RPC url\n\n  -v, --verbose                    log everything\n\n  --authority=authority            alternative keypair to use for VRF authority\n\n  --callbackPid=callbackPid        (required) callback program ID\n\n  --enable                         enable vrf permissions\n\n  --ixData=ixData                  (required) instruction data\n\n  --mainnetBeta                    WARNING: use mainnet-beta solana cluster\n\n  --programId=programId            alternative Switchboard program ID to interact with\n\n  --queueAuthority=queueAuthority  alternative keypair to use for queue authority\n\n  --vrfKeypair=vrfKeypair          filesystem path of existing keypair to use for VRF Account\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/vrf/create/index.ts"},"src/commands/vrf/create/index.ts"))),(0,i.kt)("h2",{id:"sbv2-vrfcreateexample-queuekey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf:create:example QUEUEKEY")),(0,i.kt)("p",null,"create a VRF account for the client example program"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf:create:example QUEUEKEY\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nOPTIONS\n  -h, --help                       show CLI help\n\n  -k, --keypair=keypair            keypair that will pay for onchain transactions. defaults to new account authority if\n                                   no alternate authority provided\n\n  -s, --silent                     suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl              alternate RPC url\n\n  -v, --verbose                    log everything\n\n  --enable                         enable vrf permissions\n\n  --mainnetBeta                    WARNING: use mainnet-beta solana cluster\n\n  --maxResult=maxResult            [default: 256000] the maximum VRF result\n\n  --programId=programId            alternative Switchboard program ID to interact with\n\n  --queueAuthority=queueAuthority  alternative keypair to use for queue authority\n\n  --vrfKeypair=vrfKeypair          filesystem path of existing keypair to use for VRF Account\n\n  --vrfPid=vrfPid                  (required) program ID for the VRF example program\n\nEXAMPLE\n  sbv2 vrf:create:example 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --vrfPid\n  6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --keypair ../payer-keypair.json -v --enable --queueAuthority\n  queue-authority-keypair.json\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/vrf/create/example.ts"},"src/commands/vrf/create/example.ts"))),(0,i.kt)("h2",{id:"sbv2-vrfrequest-vrfkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf:request VRFKEY")),(0,i.kt)("p",null,"request a new value for a VRF"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ sbv2 vrf:request VRFKEY\n\nARGUMENTS\n  VRFKEY  public key of the VRF account to request randomness for\n\nOPTIONS\n  -h, --help                         show CLI help\n\n  -k, --keypair=keypair              keypair that will pay for onchain transactions. defaults to new account authority\n                                     if no alternate authority provided\n\n  -s, --silent                       suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl                alternate RPC url\n\n  -v, --verbose                      log everything\n\n  --authority=authority              alternative keypair that is the VRF authority\n\n  --funderAuthority=funderAuthority  alternative keypair to pay for VRF request\n\n  --mainnetBeta                      WARNING: use mainnet-beta solana cluster\n\n  --programId=programId              alternative Switchboard program ID to interact with\n\nEXAMPLE\n  sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable\n  --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData\n  "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner":\n  false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner":\n  false,"isWritable": false}"\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/vrf/request.ts"},"src/commands/vrf/request.ts"))))}c.isMDXComponent=!0;var l=["components"],p={sidebar_position:80,title:"sbv2 vrf"},s=void 0,f={unversionedId:"cli/vrf",id:"cli/vrf",title:"sbv2 vrf",description:"",source:"@site/api/cli/vrf.mdx",sourceDirName:"cli",slug:"/cli/vrf",permalink:"/api/cli/vrf",tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80,title:"sbv2 vrf"},sidebar:"tutorialSidebar",previous:{title:"sbv2 queue",permalink:"/api/cli/queue"},next:{title:"sbv2 update",permalink:"/api/cli/update"}},v={},m=[],y={toc:m};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(c,{mdxType:"Sbv2Vrf"}))}d.isMDXComponent=!0}}]);