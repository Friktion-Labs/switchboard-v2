"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5940],{5318:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=s(n),m=a,f=b["".concat(p,".").concat(m)]||b[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2988:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return l},metadata:function(){return b},toc:function(){return f}});var r=n(2685),a=n(1244),o=(n(7378),n(5318)),i=["components"],c={toc:[{value:"<code>sbv2 job:create JOBDEFINITION</code>",id:"sbv2-jobcreate-jobdefinition",level:2},{value:"<code>sbv2 job:create:copy JOBSOURCE</code>",id:"sbv2-jobcreatecopy-jobsource",level:2},{value:"<code>sbv2 job:create:json DEFINITIONFILE</code>",id:"sbv2-jobcreatejson-definitionfile",level:2},{value:"<code>sbv2 job:create:template TEMPLATE ID</code>",id:"sbv2-jobcreatetemplate-template-id",level:2}]};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"interact with a switchboard job account"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-jobcreate-jobdefinition"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 job:create JOBDEFINITION"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-jobcreatecopy-jobsource"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 job:create:copy JOBSOURCE"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-jobcreatejson-definitionfile"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 job:create:json DEFINITIONFILE"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-jobcreatetemplate-template-id"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 job:create:template TEMPLATE ID")))),(0,o.kt)("h2",{id:"sbv2-jobcreate-jobdefinition"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 job:create JOBDEFINITION")),(0,o.kt)("p",null,"create a buffer relayer account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job:create JOBDEFINITION\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nOPTIONS\n  -a, --authority=authority  alternate keypair that will be the aggregator authority\n  -h, --help                 show CLI help\n\n  -k, --keypair=keypair      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n\n  -n, --name=name            name of the buffer account\n\n  -s, --silent               suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl        alternate RPC url\n\n  -v, --verbose              log everything\n\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n\n  --programId=programId      alternative Switchboard program ID to interact with\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/job/create/index.ts"},"src/commands/job/create/index.ts"))),(0,o.kt)("h2",{id:"sbv2-jobcreatecopy-jobsource"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 job:create:copy JOBSOURCE")),(0,o.kt)("p",null,"copy a job account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job:create:copy JOBSOURCE\n\nARGUMENTS\n  JOBSOURCE  public key of the aggregator account to copy\n\nOPTIONS\n  -f, --outputFile=outputFile  output file to save job definition to\n  -h, --help                   show CLI help\n\n  -k, --keypair=keypair        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n\n  -s, --silent                 suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl          alternate RPC url\n\n  -v, --verbose                log everything\n\n  --force                      skip job confirmation\n\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n\n  --programId=programId        alternative Switchboard program ID to interact with\n\nEXAMPLE\n  $ sbv2 job:create:copy 7pdb5RVM6cVBU8XDfpGqakb1S4wX2i5QsZxT117tK4HS --keypair ../payer-keypair.json\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/job/create/copy.ts"},"src/commands/job/create/copy.ts"))),(0,o.kt)("h2",{id:"sbv2-jobcreatejson-definitionfile"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 job:create:json DEFINITIONFILE")),(0,o.kt)("p",null,"create a job from a json file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job:create:json DEFINITIONFILE\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of job definition json file\n\nOPTIONS\n  -h, --help                                 show CLI help\n\n  -k, --keypair=keypair                      keypair that will pay for onchain transactions. defaults to new account\n                                             authority if no alternate authority provided\n\n  -s, --silent                               suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl                        alternate RPC url\n\n  -v, --verbose                              log everything\n\n  --aggregatorAuthority=aggregatorAuthority  filesystem path of aggregator authority keypair to add job account to\n\n  --aggregatorKey=aggregatorKey              public key of aggregator to add job to\n\n  --force                                    overwrite output file\n\n  --mainnetBeta                              WARNING: use mainnet-beta solana cluster\n\n  --outputFile=outputFile                    output job schema to a json file\n\n  --programId=programId                      alternative Switchboard program ID to interact with\n\nALIASES\n  $ sbv2 json:create:job\n\nEXAMPLE\n  $ sbv2 job:create:json examples/job.json --keypair ../payer-keypair.json \n  --aggregatorAuthority=../aggregator-keypair.json --outputFile=job.schema.json\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/job/create/json.ts"},"src/commands/job/create/json.ts"))),(0,o.kt)("h2",{id:"sbv2-jobcreatetemplate-template-id"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 job:create:template TEMPLATE ID")),(0,o.kt)("p",null,"create a new on-chain job account from an existing template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job:create:template TEMPLATE ID\n\nARGUMENTS\n  TEMPLATE  the template type (ftxUs/coinbase/etc) or the filesystem path to the json file containing the task\n            definitions\n\n  ID        api endpoint id for a given source\n\nOPTIONS\n  -f, --outputFile=outputFile  output file to save job definition to\n  -h, --help                   show CLI help\n\n  -k, --keypair=keypair        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n\n  -k, --outKeypair=outKeypair  existing keypair file to store new account. useful for using the same public key on\n                               different clusters\n\n  -n, --name=name              name of the job account for easier identification\n\n  -s, --silent                 suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl          alternate RPC url\n\n  -v, --verbose                log everything\n\n  --force                      skip job confirmation\n\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n\n  --programId=programId        alternative Switchboard program ID to interact with\n\nEXAMPLES\n  $ sbv2 job:create:template ftxUs BTC_USD --keypair ../payer-keypair.json\n  $ sbv2 job:create:template ftxUs BTC_USD --keypair ../payer-keypair.json --name=ftxUs_Btc\n  $ sbv2 job:create:template ftxUs BTC_USD -k ../payer-keypair.json -n ftxUs_Btc -f ftx_us_btc_job.json\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/job/create/template.ts"},"src/commands/job/create/template.ts"))))}p.isMDXComponent=!0;var s=["components"],l={sidebar_position:10,title:"sbv2 job"},u=void 0,b={unversionedId:"cli/job",id:"cli/job",title:"sbv2 job",description:"",source:"@site/api/cli/job.mdx",sourceDirName:"cli",slug:"/cli/job",permalink:"/api/cli/job",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"sbv2 job"},sidebar:"tutorialSidebar",previous:{title:"sbv2 print",permalink:"/api/cli/print"},next:{title:"sbv2 aggregator",permalink:"/api/cli/aggregator"}},m={},f=[],d={toc:f};function y(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(p,{mdxType:"Sbv2Job"}))}y.isMDXComponent=!0}}]);