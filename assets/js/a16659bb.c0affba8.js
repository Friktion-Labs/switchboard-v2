"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[612],{5318:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var a=r(7378);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},u=Object.keys(e);for(a=0;a<u.length;a++)r=u[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(a=0;a<u.length;a++)r=u[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,u=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(r),d=n,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||u;return r?a.createElement(h,o(o({ref:t},c),{},{components:r})):a.createElement(h,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var u=r.length,o=new Array(u);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var l=2;l<u;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},470:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return h}});var a=r(2685),n=r(1244),u=(r(7378),r(5318)),o=["components"],i={toc:[{value:"<code>sbv2 queue:add:crank QUEUEKEY</code>",id:"sbv2-queueaddcrank-queuekey",level:2},{value:"<code>sbv2 queue:create</code>",id:"sbv2-queuecreate",level:2},{value:"<code>sbv2 queue:permit:aggregator AGGREGATORKEY</code>",id:"sbv2-queuepermitaggregator-aggregatorkey",level:2},{value:"<code>sbv2 queue:permit:oracle ORACLEKEY</code>",id:"sbv2-queuepermitoracle-oraclekey",level:2},{value:"<code>sbv2 queue:set:rewards QUEUEKEY REWARDS</code>",id:"sbv2-queuesetrewards-queuekey-rewards",level:2},{value:"<code>sbv2 queue:set:vrf QUEUEKEY</code>",id:"sbv2-queuesetvrf-queuekey",level:2}]};function s(e){var t=e.components,r=(0,n.Z)(e,o);return(0,u.kt)("wrapper",(0,a.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("p",null,"interact with a switchboard oracle queue account"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queueaddcrank-queuekey"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue:add:crank QUEUEKEY"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queuecreate"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue:create"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queuepermitaggregator-aggregatorkey"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue:permit:aggregator AGGREGATORKEY"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queuepermitoracle-oraclekey"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue:permit:oracle ORACLEKEY"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queuesetrewards-queuekey-rewards"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue:set:rewards QUEUEKEY REWARDS"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queuesetvrf-queuekey"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue:set:vrf QUEUEKEY")))),(0,u.kt)("h2",{id:"sbv2-queueaddcrank-queuekey"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue:add:crank QUEUEKEY")),(0,u.kt)("p",null,"add a crank to an existing oracle queue"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue:add:crank QUEUEKEY\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nOPTIONS\n  -h, --help             show CLI help\n\n  -k, --keypair=keypair  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n\n  -n, --name=name        name of the crank for easier identification\n\n  -r, --maxRows=maxRows  maximum number of rows a crank can support\n\n  -s, --silent           suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl    alternate RPC url\n\n  -v, --verbose          log everything\n\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n\n  --programId=programId  alternative Switchboard program ID to interact with\n\nEXAMPLE\n  $ sbv2 queue:add:crank 5aYuxRdcB9GpWrEXVMBQp2R5uf94uoBiFdMEBwcmHuU4 -k ../authority-keypair.json -n crank-1\n")),(0,u.kt)("p",null,(0,u.kt)("em",{parentName:"p"},"See code: ",(0,u.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/queue/add/crank.ts"},"src/commands/queue/add/crank.ts"))),(0,u.kt)("h2",{id:"sbv2-queuecreate"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue:create")),(0,u.kt)("p",null,"create a custom queue"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue:create\n\nOPTIONS\n  -a, --authority=authority          keypair to delegate authority to for creating permissions targeted at the queue\n  -c, --crankSize=crankSize          [default: 100] size of the crank\n  -f, --outputFile=outputFile        output queue schema to a json file\n  -h, --help                         show CLI help\n\n  -k, --keypair=keypair              keypair that will pay for onchain transactions. defaults to new account authority\n                                     if no alternate authority provided\n\n  -n, --name=name                    [default: Custom Queue] name of the queue for easier identification\n\n  -o, --numOracles=numOracles        number of oracles to add to the queue\n\n  -o, --oracleTimeout=oracleTimeout  [default: 180] number of oracles to add to the queue\n\n  -r, --reward=reward                [default: 0] oracle rewards for successfully responding to an update request\n\n  -s, --silent                       suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl                alternate RPC url\n\n  -v, --verbose                      log everything\n\n  --enableBufferRelayers             enable oracles to fulfill buffer relayer requests\n\n  --force                            overwrite output file if existing\n\n  --mainnetBeta                      WARNING: use mainnet-beta solana cluster\n\n  --minStake=minStake                [default: 0] minimum stake required by an oracle to join the queue\n\n  --programId=programId              alternative Switchboard program ID to interact with\n\n  --queueSize=queueSize              [default: 100] maximum number of oracles the queue can support\n\n  --unpermissionedFeeds              permit unpermissioned feeds\n\n  --unpermissionedVrf                permit unpermissioned VRF accounts\n\nALIASES\n  $ sbv2 custom:queue\n")),(0,u.kt)("p",null,(0,u.kt)("em",{parentName:"p"},"See code: ",(0,u.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/queue/create.ts"},"src/commands/queue/create.ts"))),(0,u.kt)("h2",{id:"sbv2-queuepermitaggregator-aggregatorkey"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue:permit:aggregator AGGREGATORKEY")),(0,u.kt)("p",null,"permit an aggregator to use an oracle queue's resources"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue:permit:aggregator AGGREGATORKEY\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to authorize oracle queue usage\n\nOPTIONS\n  -a, --authority=authority  alternate keypair that is the authority for oracle queue\n  -h, --help                 show CLI help\n\n  -k, --keypair=keypair      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n\n  -s, --silent               suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl        alternate RPC url\n\n  -v, --verbose              log everything\n\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n\n  --programId=programId      alternative Switchboard program ID to interact with\n\nEXAMPLE\n  $ sbv2 queue:permit:aggregator 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4 --keypair ../queue-authority.json\n")),(0,u.kt)("p",null,(0,u.kt)("em",{parentName:"p"},"See code: ",(0,u.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/queue/permit/aggregator.ts"},"src/commands/queue/permit/aggregator.ts"))),(0,u.kt)("h2",{id:"sbv2-queuepermitoracle-oraclekey"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue:permit:oracle ORACLEKEY")),(0,u.kt)("p",null,"permit an oracle to heartbeat on a queue"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue:permit:oracle ORACLEKEY\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to authorize oracle queue usage\n\nOPTIONS\n  -a, --authority=authority  alternate keypair that is the authority for oracle queue\n  -h, --help                 show CLI help\n\n  -k, --keypair=keypair      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n\n  -s, --silent               suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl        alternate RPC url\n\n  -v, --verbose              log everything\n\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n\n  --programId=programId      alternative Switchboard program ID to interact with\n\nEXAMPLE\n  $ sbv2 queue:permit:oracle 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4 --keypair ../queue-authority.json\n")),(0,u.kt)("p",null,(0,u.kt)("em",{parentName:"p"},"See code: ",(0,u.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/queue/permit/oracle.ts"},"src/commands/queue/permit/oracle.ts"))),(0,u.kt)("h2",{id:"sbv2-queuesetrewards-queuekey-rewards"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue:set:rewards QUEUEKEY REWARDS")),(0,u.kt)("p",null,"set an oracle queue's rewards"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue:set:rewards QUEUEKEY REWARDS\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue\n  REWARDS   token rewards for each assigned oracle per open round call\n\nOPTIONS\n  -a, --authority=authority  alternate keypair that is the authority for oracle queue\n  -h, --help                 show CLI help\n\n  -k, --keypair=keypair      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n\n  -s, --silent               suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl        alternate RPC url\n\n  -v, --verbose              log everything\n\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n\n  --programId=programId      alternative Switchboard program ID to interact with\n")),(0,u.kt)("p",null,(0,u.kt)("em",{parentName:"p"},"See code: ",(0,u.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/queue/set/rewards.ts"},"src/commands/queue/set/rewards.ts"))),(0,u.kt)("h2",{id:"sbv2-queuesetvrf-queuekey"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue:set:vrf QUEUEKEY")),(0,u.kt)("p",null,"add a crank to an existing oracle queue"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue:set:vrf QUEUEKEY\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nOPTIONS\n  -a, --authority=authority  alternate keypair that is the authority for oracle queue\n  -h, --help                 show CLI help\n\n  -k, --keypair=keypair      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n\n  -s, --silent               suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl        alternate RPC url\n\n  -v, --verbose              log everything\n\n  --disable                  disable unpermissionedVrfEnabled\n\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n\n  --programId=programId      alternative Switchboard program ID to interact with\n")),(0,u.kt)("p",null,(0,u.kt)("em",{parentName:"p"},"See code: ",(0,u.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/cli/src/commands/queue/set/vrf.ts"},"src/commands/queue/set/vrf.ts"))))}s.isMDXComponent=!0;var l=["components"],c={sidebar_position:50,title:"sbv2 queue"},p=void 0,m={unversionedId:"cli/queue",id:"cli/queue",title:"sbv2 queue",description:"",source:"@site/api/cli/queue.mdx",sourceDirName:"cli",slug:"/cli/queue",permalink:"/api/cli/queue",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50,title:"sbv2 queue"},sidebar:"tutorialSidebar",previous:{title:"sbv2 oracle",permalink:"/api/cli/oracle"},next:{title:"sbv2 vrf",permalink:"/api/cli/vrf"}},d={},h=[],k={toc:h};function f(e){var t=e.components,r=(0,n.Z)(e,l);return(0,u.kt)("wrapper",(0,a.Z)({},k,r,{components:t,mdxType:"MDXLayout"}),(0,u.kt)(s,{mdxType:"Sbv2Queue"}))}f.isMDXComponent=!0}}]);