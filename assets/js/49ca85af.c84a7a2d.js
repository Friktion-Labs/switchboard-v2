"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4448],{5318:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return m}});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),l=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},s=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(g,u(u({ref:t},s),{},{components:a})):n.createElement(g,u({ref:t},s))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,u=new Array(o);u[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,u[1]=c;for(var l=2;l<o;l++)u[l]=a[l];return n.createElement.apply(null,u)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},517:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(7378);function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},637:function(e,t,a){a.d(t,{Z:function(){return s}});var n=a(5773),r=a(7378),o=a(6457),u=a(9036),c=a(8944),i="tabItem_WhCL";function l(e){var t,a,o,l=e.lazy,s=e.block,p=e.defaultValue,d=e.values,m=e.groupId,g=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=d?d:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,u.lx)(y,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===p?p:null!=(t=null!=p?p:null==(a=b.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(o=b[0])?void 0:o.props.value;if(null!==h&&!y.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,u.UB)(),v=k.tabGroupChoices,A=k.setTabGroupChoices,w=(0,r.useState)(h),T=w[0],N=w[1],O=[],j=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var K=v[m];null!=K&&K!==T&&y.some((function(e){return e.value===K}))&&N(K)}var x=function(e){var t=e.currentTarget,a=O.indexOf(t),n=y[a].value;n!==T&&(j(t),N(n),null!=m&&A(m,n))},E=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=O.indexOf(e.currentTarget)+1;a=O[n]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;a=O[r]||O[O.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":s},g)},y.map((function(e){var t=e.value,a=e.label,o=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return O.push(e)},onKeyDown:E,onFocus:x,onClick:x},o,{className:(0,c.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),l?(0,r.cloneElement)(b.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function s(e){var t=(0,o.Z)();return r.createElement(l,(0,n.Z)({key:String(t)},e))}},2397:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var n=a(5773),r=a(808),o=(a(7378),a(5318)),u=(a(1884),a(637)),c=a(517),i=["components"],l={sidebar_position:30,title:"Data Feeds"},s=void 0,p={unversionedId:"developers/feed",id:"developers/feed",title:"Data Feeds",description:"\x3c!--",source:"@site/docs/developers/feed.mdx",sourceDirName:"developers",slug:"/developers/feed",permalink:"/developers/feed",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Data Feeds"},sidebar:"tutorialSidebar",previous:{title:"Oracles",permalink:"/developers/oracle"},next:{title:"Randomness",permalink:"/developers/randomness"}},d={},m=[{value:"Reading a Data Feed",id:"reading-a-data-feed",level:2},{value:"Creating a Data Feed",id:"creating-a-data-feed",level:2},{value:"Funding a Data Feed",id:"funding-a-data-feed",level:2},{value:"Requesting a Feed Update",id:"requesting-a-feed-update",level:2},{value:"Push to Crank",id:"push-to-crank",level:2},{value:"Add History Buffer",id:"add-history-buffer",level:2}],g={toc:m};function b(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"reading-a-data-feed"},"Reading a Data Feed"),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_v2::AggregatorAccountData;\nuse std::convert::TryInto;\n\nlet feed_result = AggregatorAccountData::new(feed_account_info)?.get_result()?;\n\nlet decimal: f64 = feed_result.try_into()?;\n"))),(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  AggregatorAccount,\n  loadSwitchboardProgram,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst aggregatorAccount = new AggregatorAccount({\n  program,\n  publicKey: aggregatorKey,\n});\n\nconst latestResult = await aggregatorAccount.getLatestValue();\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 aggregator print AGGREGATORKEY\n# OR\nsbv2 aggregator watch AGGREGATORKEY\n")))),(0,o.kt)("h2",{id:"creating-a-data-feed"},"Creating a Data Feed"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"aggregatorInit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"leaseInit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jobInit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"permissionInit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"aggregatorAddJob"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  AggregatorAccount,\n  loadSwitchboardProgram,\n  LeaseAccount,\n  OracleQueueAccount,\n  SwitchboardPermission,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet authority: Keypair; // queue authority\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: queuePubkey,\n});\n\n// aggregator\nconst aggregatorAccount = await AggregatorAccount.create(program, {\n  name: Buffer.from("MY SOL/USD Feed"),\n  batchSize: 1,\n  minRequiredOracleResults: 1,\n  minRequiredJobResults: 1,\n  minUpdateDelaySeconds: 10,\n  queueAccount,\n  authority: authority.publicKey,\n});\n\n// permission\nconst permissionAccount = await PermissionAccount.create(program, {\n  authority: authority.publicKey,\n  granter: queueAccount.publicKey,\n  grantee: aggregatorAccount.publicKey,\n});\nawait aggregatorPermission.set({\n  authority,\n  permission: SwitchboardPermission.PERMIT_ORACLE_QUEUE_USAGE,\n  enable: true,\n});\n\n// lease\nconst leaseContract = await LeaseAccount.create(program, {\n  loadAmount: new anchor.BN(0),\n  funder: tokenAccount,\n  funderAuthority: authority,\n  oracleQueueAccount: queueAccount,\n  aggregatorAccount,\n});\n\n// job\nconst tasks: OracleJob.Task[] = [\n  OracleJob.Task.create({\n    httpTask: OracleJob.HttpTask.create({\n      url: `https://ftx.us/api/markets/SOL_USD`,\n    }),\n  }),\n  OracleJob.Task.create({\n    jsonParseTask: OracleJob.JsonParseTask.create({ path: "$.result.price" }),\n  }),\n];\nconst jobData = Buffer.from(\n  OracleJob.encodeDelimited(\n    OracleJob.create({\n      tasks,\n    })\n  ).finish()\n);\nconst jobKeypair = anchor.web3.Keypair.generate();\nconst jobAccount = await JobAccount.create(program, {\n  data: jobData,\n  keypair: jobKeypair,\n  authority: authority.publicKey,\n});\n\n// add job to aggregator\nawait aggregatorAccount.addJob(jobAccount, authority);\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 aggregator create AGGREGATORKEY \\\n    --name "My Buffer" \\\n    --keypair "path/to/payer/keypair.json" \\\n    --batchSize 1 \\\n    --minOracles 1 \\\n    --minJobs 1 \\\n    --updateInterval 45 \\\n    --job "path/to/job-definition-1.json" \\\n    --job "path/to/job-definition-2.json" \\\n    --verbose\n')))),(0,o.kt)("h2",{id:"funding-a-data-feed"},"Funding a Data Feed"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"leeaseExtend"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  AggregatorAccount,\n  loadSwitchboardProgram,\n  LeaseAccount,\n  OracleQueueAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet amount = new anchor.BN(1_000_000_000);\nlet authority: Keypair; // queue authority\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: queuePubkey,\n});\nconst mint = await queueAccount.loadMint();\n\nconst funderTokenAccount = (\n  await mint.getOrCreateAssociatedAccountInfo(payer.publicKey)\n).address;\n\nconst signature = await leaseAccount.extend({\n  loadAmount: amount,\n  funder: funderTokenAccount,\n  funderAuthority: payer,\n});\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 lease extend AGGREGATORKEY \\\n    --keypair "path/to/payer/keypair.json" \\\n    --authority "path/to/authority/keypair.json" \\\n    --amount 0.1\n')))),(0,o.kt)("h2",{id:"requesting-a-feed-update"},"Requesting a Feed Update"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"openRound"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  AggregatorAccount,\n  loadSwitchboardProgram,\n  LeaseAccount,\n  OracleQueueAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet amount = new anchor.BN(1_000_000_000);\nlet authority: Keypair; // queue authority\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: queuePubkey,\n});\nconst mint = await queueAccount.loadMint();\n\nconst payoutWallet = (\n  await mint.getOrCreateAssociatedAccountInfo(payer.publicKey)\n).address;\n\nconst aggregatorAccount = new AggregatorAccount({\n  program,\n  publicKey: aggregatorKey,\n});\n\nconst signature = await aggregatorAccount.openRound({\n  queueAccount,\n  payoutWallet,\n});\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 aggregator update AGGREGATORKEY \\\n    --keypair "path/to/payer/keypair.json" \\\n')))),(0,o.kt)("h2",{id:"push-to-crank"},"Push to Crank"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"crankPush"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  AggregatorAccount,\n  CrankAccount,\n  loadSwitchboardProgram,\n  LeaseAccount,\n  OracleQueueAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst aggregatorAccount = new AggregatorAccount({\n  program,\n  publicKey: aggregatorKey,\n});\nconst aggregator = await aggregatorAccount.loadData();\n\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: aggregator.queuePubkey,\n});\nconst mint = await queueAccount.loadMint();\n\nconst crankAccount = new CrankAccount({ program, publicKey: crankKey });\nconst crank = await crankAccount.loadData();\n\nawait crankAccount.push({ aggregatorAccount });\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 crank push CRANKKEY AGGREGATORKEY \\\n    --keypair "path/to/payer/keypair.json"\n')))),(0,o.kt)("h2",{id:"add-history-buffer"},"Add History Buffer"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"aggregatorSetHistoryBuffer"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  AggregatorAccount,\n  CrankAccount,\n  loadSwitchboardProgram,\n  LeaseAccount,\n  OracleQueueAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet authority: Keypair; // feed authority\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst aggregatorAccount = new AggregatorAccount({\n  program,\n  publicKey: aggregatorKey,\n});\nconst aggregator = await aggregatorAccount.loadData();\n\nconst signature = await aggregatorAccount.setHistoryBuffer({ authority, size });\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 aggregator set history AGGREGATORKEY SIZE \\\n    --keypair "path/to/payer/keypair.json"\n')))))}b.isMDXComponent=!0}}]);