"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[540],{5318:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),v=s(t),d=a,g=v["".concat(p,".").concat(d)]||v[d]||u[d]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=v;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},2187:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return c},metadata:function(){return v},toc:function(){return g}});var r=t(5773),a=t(808),i=(t(7378),t(5318)),o=["components"],l={toc:[{value:"<code>sbv2 print [PUBLICKEY]</code>",id:"sbv2-print-publickey",level:2},{value:"<code>sbv2 print aggregator [AGGREGATORKEY]</code>",id:"sbv2-print-aggregator-aggregatorkey",level:2},{value:"<code>sbv2 print aggregator history [AGGREGATORKEY]</code>",id:"sbv2-print-aggregator-history-aggregatorkey",level:2},{value:"<code>sbv2 print aggregator lease [AGGREGATORKEY]</code>",id:"sbv2-print-aggregator-lease-aggregatorkey",level:2},{value:"<code>sbv2 print aggregator permission [AGGREGATORKEY]</code>",id:"sbv2-print-aggregator-permission-aggregatorkey",level:2},{value:"<code>sbv2 print crank [CRANKKEY]</code>",id:"sbv2-print-crank-crankkey",level:2},{value:"<code>sbv2 print job [JOBKEY]</code>",id:"sbv2-print-job-jobkey",level:2},{value:"<code>sbv2 print oracle [ORACLEKEY]</code>",id:"sbv2-print-oracle-oraclekey",level:2},{value:"<code>sbv2 print oracle permission [ORACLEKEY]</code>",id:"sbv2-print-oracle-permission-oraclekey",level:2},{value:"<code>sbv2 print permission [PERMISSIONKEY]</code>",id:"sbv2-print-permission-permissionkey",level:2},{value:"<code>sbv2 print program</code>",id:"sbv2-print-program",level:2},{value:"<code>sbv2 print queue [QUEUEKEY]</code>",id:"sbv2-print-queue-queuekey",level:2},{value:"<code>sbv2 print vrf [VRFKEY]</code>",id:"sbv2-print-vrf-vrfkey",level:2}]};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"find and print a switchboard account by public key for a given cluster"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-publickey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print [PUBLICKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-aggregator-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print aggregator [AGGREGATORKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-aggregator-history-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print aggregator history [AGGREGATORKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-aggregator-lease-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print aggregator lease [AGGREGATORKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-aggregator-permission-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print aggregator permission [AGGREGATORKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-crank-crankkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print crank [CRANKKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-job-jobkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print job [JOBKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-oracle-oraclekey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print oracle [ORACLEKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-oracle-permission-oraclekey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print oracle permission [ORACLEKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-permission-permissionkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print permission [PERMISSIONKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-program"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print program"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-queue-queuekey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print queue [QUEUEKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-print-vrf-vrfkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 print vrf [VRFKEY]")))),(0,i.kt)("h2",{id:"sbv2-print-publickey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print [PUBLICKEY]")),(0,i.kt)("p",null,"find a switchboard account by public key for a given cluster"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print [PUBLICKEY] [-h] [-v]\n\nARGUMENTS\n  PUBLICKEY  public key of a switchboard account to lookup\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose  log everything\n\nDESCRIPTION\n  find a switchboard account by public key for a given cluster\n\nEXAMPLES\n  $ sbv2 print GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboard-v2/blob/v0.2.0/dist/commands/print/index.ts"},"dist/commands/print/index.ts"))),(0,i.kt)("h2",{id:"sbv2-print-aggregator-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print aggregator [AGGREGATORKEY]")),(0,i.kt)("p",null,"Print the deserialized Switchboard aggregator account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print aggregator [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--jobs] [-o]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -o, --oraclePubkeysData  print the assigned oracles for the current round\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobs                   output job definitions\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator print\n\nEXAMPLES\n  $ sbv2 aggregator:print GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR\n")),(0,i.kt)("h2",{id:"sbv2-print-aggregator-history-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print aggregator history [AGGREGATORKEY]")),(0,i.kt)("p",null,"Print the history buffer associated with an aggregator account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print aggregator history [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the history buffer associated with an aggregator account\n\nALIASES\n  $ sbv2 aggregator history print\n  $ sbv2 aggregator print history\n\nEXAMPLES\n  $ sbv2 aggregator:print:history 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,i.kt)("h2",{id:"sbv2-print-aggregator-lease-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print aggregator lease [AGGREGATORKEY]")),(0,i.kt)("p",null,"Print the lease account associated with a Switchboard aggregator account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print aggregator lease [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the lease account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator lease print\n  $ sbv2 aggregator print lease\n\nEXAMPLES\n  $ sbv2 aggregator:lease:print 8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee\n")),(0,i.kt)("h2",{id:"sbv2-print-aggregator-permission-aggregatorkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print aggregator permission [AGGREGATORKEY]")),(0,i.kt)("p",null,"Print the permission account associated with a Switchboard aggregator account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print aggregator permission [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator permission print\n  $ sbv2 aggregator print permission\n\nEXAMPLES\n  $ sbv2 aggregator:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,i.kt)("h2",{id:"sbv2-print-crank-crankkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print crank [CRANKKEY]")),(0,i.kt)("p",null,"print deserialized switchboard crank account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print crank [CRANKKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  print deserialized switchboard crank account\n\nALIASES\n  $ sbv2 crank print\n\nEXAMPLES\n  $ sbv2 crank:print 85L2cFUvXaeGQ4HrzP8RJEVCL7WvRrXM2msvEmQ82AVr\n")),(0,i.kt)("h2",{id:"sbv2-print-job-jobkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print job [JOBKEY]")),(0,i.kt)("p",null,"Print the deserialized Switchboard job account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print job [JOBKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  JOBKEY  public key of the job account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard job account\n\nALIASES\n  $ sbv2 job print\n\nEXAMPLES\n  $ sbv2 job:print SzTvFZLz3hwjZFMwVWzuEnr1oUF6qyvXwXCvsqf7qeA\n")),(0,i.kt)("h2",{id:"sbv2-print-oracle-oraclekey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print oracle [ORACLEKEY]")),(0,i.kt)("p",null,"Print the deserialized Switchboard oracle account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print oracle [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oracle account\n\nALIASES\n  $ sbv2 oracle print\n\nEXAMPLES\n  $ sbv2 oracle:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,i.kt)("h2",{id:"sbv2-print-oracle-permission-oraclekey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print oracle permission [ORACLEKEY]")),(0,i.kt)("p",null,"Print the permission account associated with a Switchboard oracle account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print oracle permission [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard oracle account\n\nALIASES\n  $ sbv2 oracle permission print\n  $ sbv2 oracle print permission\n\nEXAMPLES\n  $ sbv2 oracle:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,i.kt)("h2",{id:"sbv2-print-permission-permissionkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print permission [PERMISSIONKEY]")),(0,i.kt)("p",null,"Print the deserialized Switchboard permission account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print permission [PERMISSIONKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard permission account\n\nALIASES\n  $ sbv2 permission print\n\nEXAMPLES\n  $ sbv2 permission:print 94XXM72K2aKu2wcuJaawV8njuGaFZvhy8iKgPxoa1tJk\n")),(0,i.kt)("h2",{id:"sbv2-print-program"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print program")),(0,i.kt)("p",null,"print the deserialized switchboard program state account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print program [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  print the deserialized switchboard program state account\n\nALIASES\n  $ sbv2 program print\n\nEXAMPLES\n  $ sbv2 program:print\n")),(0,i.kt)("h2",{id:"sbv2-print-queue-queuekey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print queue [QUEUEKEY]")),(0,i.kt)("p",null,"Print the deserialized Switchboard oraclequeue account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print queue [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--oracles]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --oracles              output oracles that are heartbeating on the queue\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oraclequeue account\n\nALIASES\n  $ sbv2 queue print\n\nEXAMPLES\n  $ sbv2 queue:print GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U\n")),(0,i.kt)("h2",{id:"sbv2-print-vrf-vrfkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 print vrf [VRFKEY]")),(0,i.kt)("p",null,"Print the deserialized Switchboard VRF account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 print vrf [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard VRF account\n\nALIASES\n  $ sbv2 vrf print\n\nEXAMPLES\n  $ sbv2 vrf:print\n")))}p.isMDXComponent=!0;var s=["components"],c={sidebar_position:5,title:"sbv2 print"},u=void 0,v={unversionedId:"cli/print",id:"cli/print",title:"sbv2 print",description:"",source:"@site/api/cli/print.mdx",sourceDirName:"cli",slug:"/cli/print",permalink:"/api/cli/print",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"sbv2 print"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/api/cli"},next:{title:"sbv2 job",permalink:"/api/cli/job"}},d={},g=[],b={toc:g};function m(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(p,{mdxType:"Sbv2Print"}))}m.isMDXComponent=!0}}]);