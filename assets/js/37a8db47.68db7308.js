"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[204],{5318:function(t,e,n){n.d(e,{Zo:function(){return k},kt:function(){return d}});var l=n(7378);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,l,r=function(t,e){if(null==t)return{};var n,l,r={},o=Object.keys(t);for(l=0;l<o.length;l++)n=o[l],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(l=0;l<o.length;l++)n=o[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=l.createContext({}),c=function(t){var e=l.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},k=function(t){var e=c(t.components);return l.createElement(u.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},p=l.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,u=t.parentName,k=i(t,["components","mdxType","originalType","parentName"]),p=c(n),d=r,b=p["".concat(u,".").concat(d)]||p[d]||s[d]||o;return n?l.createElement(b,a(a({ref:e},k),{},{components:n})):l.createElement(b,a({ref:e},k))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,a=new Array(o);a[0]=p;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=t,i.mdxType="string"==typeof t?t:r,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5165:function(t,e,n){n.r(e),n.d(e,{assets:function(){return k},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return s}});var l=n(2685),r=n(1244),o=(n(7378),n(5318)),a=["components"],i={sidebar_position:1,slug:".",title:"Requirements"},u="Background",c={unversionedId:"oracle/operator/requirements",id:"oracle/operator/requirements",title:"Requirements",description:"A Switchboard oracle is a Node.js container that sits between the Solana blockchain and the internet and waits for update requests from its assigned oracle queue.",source:"@site/docs/oracle/operator/requirements.mdx",sourceDirName:"oracle/operator",slug:"/oracle/operator/",permalink:"/oracle/operator/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:".",title:"Requirements"},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/oracle/"},next:{title:"Docker",permalink:"/oracle/operator/docker"}},k={},s=[{value:"Hardware Requirements",id:"hardware-requirements",level:2},{value:"RPC Endpoint",id:"rpc-endpoint",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Solana Config",id:"solana-config",level:3},{value:"Oracle Config",id:"oracle-config",level:3},{value:"Keypair Config",id:"keypair-config",level:3},{value:"Monitoring Config",id:"monitoring-config",level:3}],p={toc:s};function d(t){var e=t.components,n=(0,r.Z)(t,a);return(0,o.kt)("wrapper",(0,l.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"background"},"Background"),(0,o.kt)("p",null,"A Switchboard oracle is a Node.js container that sits between the Solana blockchain and the internet and waits for update requests from its assigned oracle queue."),(0,o.kt)("p",null,"You can find the latest Switchboard oracle image on ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/switchboardlabs/node/tags"},"DockerHub"),"."),(0,o.kt)("h2",{id:"hardware-requirements"},"Hardware Requirements"),(0,o.kt)("p",null,"A Switchboard oracle should be hosted in a highly available environment with some level of redundancy and fail over to prevent outages, although oracles are not deducted for being offline."),(0,o.kt)("p",null,"Currently the Switchboard oracle is a single threaded Node.js application with no strict hardware requirements. At the very minimum a node should have:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"4gb RAM"),(0,o.kt)("li",{parentName:"ul"},"3.0 Ghz CPU"),(0,o.kt)("li",{parentName:"ul"},"100+ Mbps connection")),(0,o.kt)("h2",{id:"rpc-endpoint"},"RPC Endpoint"),(0,o.kt)("p",null,"A Switchboard oracle should have a reliable RPC endpoint with no rate limiting in order to respond in a timely manner. RPC providers will need to have ",(0,o.kt)("inlineCode",{parentName:"p"},"--full-rpc-api")," enabled in their validator config, along with the ability to support fetching 100 program accounts in a single getProgramAccounts request."),(0,o.kt)("p",null,"Switchboard recommends the following RPC providers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"RPC Pool"),(0,o.kt)("li",{parentName:"ul"},"GenesysGo"),(0,o.kt)("li",{parentName:"ul"},"Syndica")),(0,o.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'env title=".env"',env:!0,title:'".env"'},'# Solana Config\nCLUSTER=""\nRPC_URL=""\nWS_URL=""\nBACKUP_MAINNET_RPC=""\n# Oracle Config\nORACLE_KEY=""\nHEARTBEAT_INTERVAL=15\nGCP_CONFIG_BUCKET=""\n# Keypair Config\nPAYER_SECRET_PATH=""\nPAYER_SECRETS=""\nGOOGLE_PAYER_SECRET_PATH=""\n# Monitoring Config\nMETRICS_EXPORTER\nPAGERDUTY_EVENT_KEY=""\nVERBOSE=1\n')),(0,o.kt)("h3",{id:"solana-config"},"Solana Config"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"CLUSTER"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Required")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - String (devnet / mainnet-beta)",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Solana cluster you will be running an oracle on (mainnet-beta/devnet)")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"RPC_URL"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Required")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Solana RPC URL that must be capable of supporting websockets. The default RPC pools should be avoided at all cost as you will quickly hit the rate limits and risk being slashed")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"WS_URL"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - RPC_URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Websocket URL to connect to a Solana RPC server. If not provided, oracle will fallback to RPC_URL")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"BACKUP_MAINNET_RPC"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - https://api.mainnet-beta.solana.com",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Backup RPC URL in case of network congestion")))),(0,o.kt)("h3",{id:"oracle-config"},"Oracle Config"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"ORACLE_KEY"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Required")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - Public Key",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Public key of the oracle account that has been granted permissions to use an oracle queue ",(0,o.kt)("br",null))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"HEARTBEAT_INTERVAL"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - Number (seconds)",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - 30",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Seconds between oracle heartbeats. Queues have different oracle heartbeat requirements. Recommended value is 15")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"GCP_CONFIG_BUCKET"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - GCP Resource Path",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - Looks for configs.json in the current working directory. If not found, no config is loaded.",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Contains API keys for private API endpoints")))),(0,o.kt)("h3",{id:"keypair-config"},"Keypair Config"),(0,o.kt)("p",null,"You must provide one of the following environment variables, which is the same keypair that is the authority for the given ",(0,o.kt)("inlineCode",{parentName:"p"},"$ORACLE_KEY")," and will pay for any on-chain transactions."),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"PAYER_SECRET_PATH"),(0,o.kt)("td",null,(0,o.kt)("b",null,"Type")," - Filesystem Path",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Local filesystem path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"PAYER_SECRETS"),(0,o.kt)("td",null,(0,o.kt)("b",null,"Type")," - Docker Secret",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Docker Secret path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"GOOGLE_PAYER_SECRET_PATH"),(0,o.kt)("td",null,(0,o.kt)("b",null,"Type")," - GCP Resource Path",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Google cloud resource to manage your keypair securely.")))),(0,o.kt)("h3",{id:"monitoring-config"},"Monitoring Config"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"METRICS_EXPORTER"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - prometheus / gcp / opentelemetry-collector*",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - prometheus",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Dictates which metric suite to aggregate resource metrics, as defined in:",(0,o.kt)("br",null),(0,o.kt)("a",{href:"./operator/monitoring"},"Oracle - Monitoring"),(0,o.kt)("br",null),"*opentelemetry-collector only supports the default endpoint localhost:55681/v1/metric")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"PAGERDUTY_EVENT_KEY"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - String",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - Paging disabled",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Token provided by pagerduty for sending pages about various alerts.",(0,o.kt)("br",null),(0,o.kt)("a",{href:"./operator/monitoring#alerts"},"Oracle - Alerts"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"VERBOSE"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - Flag (0 or 1)",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - 0, normal logging",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Set to 1 to increase the level of logging")))))}d.isMDXComponent=!0}}]);