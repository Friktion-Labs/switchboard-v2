"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[612],{5318:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,u=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),v=s(n),d=a,f=v["".concat(l,".").concat(d)]||v[d]||p[d]||u;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var u=n.length,o=new Array(u);o[0]=v;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<u;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},470:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return b},frontMatter:function(){return c},metadata:function(){return v},toc:function(){return f}});var r=n(5773),a=n(808),u=(n(7378),n(5318)),o=["components"],i={toc:[{value:"<code>sbv2 queue create</code>",id:"sbv2-queue-create",level:2},{value:"<code>sbv2 queue print [QUEUEKEY]</code>",id:"sbv2-queue-print-queuekey",level:2},{value:"<code>sbv2 queue set rewards [QUEUEKEY] [REWARDS]</code>",id:"sbv2-queue-set-rewards-queuekey-rewards",level:2},{value:"<code>sbv2 queue set vrf [QUEUEKEY]</code>",id:"sbv2-queue-set-vrf-queuekey",level:2}]};function l(e){var t=e.components,n=(0,a.Z)(e,o);return(0,u.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("p",null,"interact with a switchboard oracle queue account"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queue-create"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue create"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queue-print-queuekey"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue print [QUEUEKEY]"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queue-set-rewards-queuekey-rewards"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue set rewards [QUEUEKEY] [REWARDS]"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#sbv2-queue-set-vrf-queuekey"},(0,u.kt)("inlineCode",{parentName:"a"},"sbv2 queue set vrf [QUEUEKEY]")))),(0,u.kt)("h2",{id:"sbv2-queue-create"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue create")),(0,u.kt)("p",null,"create a custom queue"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue create [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>] [--force] [-a\n    <value>] [-n <value>] [--minStake <value>] [-r <value>] [-c <value>] [-o <value>] [-o <value>] [--queueSize <value>]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [-f <value>]\n\nFLAGS\n  -a, --authority=<value>      keypair to delegate authority to for creating permissions targeted at the queue\n  -c, --crankSize=<value>      [default: 100] size of the crank\n  -f, --outputFile=<value>     output queue schema to a json file\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -n, --name=<value>           [default: Custom Queue] name of the queue for easier identification\n  -o, --numOracles=<value>     number of oracles to add to the queue\n  -o, --oracleTimeout=<value>  [default: 180] number of oracles to add to the queue\n  -r, --reward=<value>         [default: 0] oracle rewards for successfully responding to an update request\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --enableBufferRelayers       enable oracles to fulfill buffer relayer requests\n  --force                      overwrite output file if existing\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minStake=<value>           [default: 0] minimum stake required by an oracle to join the queue\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --queueSize=<value>          [default: 100] maximum number of oracles the queue can support\n  --unpermissionedFeeds        permit unpermissioned feeds\n  --unpermissionedVrf          permit unpermissioned VRF accounts\n\nDESCRIPTION\n  create a custom queue\n\nALIASES\n  $ sbv2 custom queue\n")),(0,u.kt)("h2",{id:"sbv2-queue-print-queuekey"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue print [QUEUEKEY]")),(0,u.kt)("p",null,"Print the deserialized Switchboard oraclequeue account"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue print [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--oracles]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --oracles              output oracles that are heartbeating on the queue\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oraclequeue account\n\nALIASES\n  $ sbv2 queue print\n\nEXAMPLES\n  $ sbv2 queue:print GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U\n")),(0,u.kt)("h2",{id:"sbv2-queue-set-rewards-queuekey-rewards"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue set rewards [QUEUEKEY] [REWARDS]")),(0,u.kt)("p",null,"set an oracle queue's rewards"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue set rewards [QUEUEKEY] [REWARDS] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [-a <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue\n  REWARDS   token rewards for each assigned oracle per open round call\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for oracle queue\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an oracle queue's rewards\n")),(0,u.kt)("h2",{id:"sbv2-queue-set-vrf-queuekey"},(0,u.kt)("inlineCode",{parentName:"h2"},"sbv2 queue set vrf [QUEUEKEY]")),(0,u.kt)("p",null,"set unpermissionedVrfEnabled"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 queue set vrf [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>] [-a\n    <value>] [--disable]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for oracle queue\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --disable                disable unpermissionedVrfEnabled\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set unpermissionedVrfEnabled\n")))}l.isMDXComponent=!0;var s=["components"],c={sidebar_position:50,title:"sbv2 queue"},p=void 0,v={unversionedId:"cli/queue",id:"cli/queue",title:"sbv2 queue",description:"",source:"@site/api/cli/queue.mdx",sourceDirName:"cli",slug:"/cli/queue",permalink:"/api/cli/queue",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50,title:"sbv2 queue"},sidebar:"tutorialSidebar",previous:{title:"sbv2 oracle",permalink:"/api/cli/oracle"},next:{title:"sbv2 vrf",permalink:"/api/cli/vrf"}},d={},f=[],m={toc:f};function b(e){var t=e.components,n=(0,a.Z)(e,s);return(0,u.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)(l,{mdxType:"Sbv2Queue"}))}b.isMDXComponent=!0}}]);