"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9992],{5318:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return d}});var t=r(7378);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function u(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),c=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):u(u({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=c(r),d=a,m=f["".concat(i,".").concat(d)]||f[d]||p[d]||o;return r?t.createElement(m,u(u({ref:n},s),{},{components:r})):t.createElement(m,u({ref:n},s))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,u=new Array(o);u[0]=f;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,u[1]=l;for(var c=2;c<o;c++)u[c]=r[c];return t.createElement.apply(null,u)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},517:function(e,n,r){r.d(n,{Z:function(){return a}});var t=r(7378);function a(e){var n=e.children,r=e.hidden,a=e.className;return t.createElement("div",{role:"tabpanel",hidden:r,className:a},n)}},637:function(e,n,r){r.d(n,{Z:function(){return s}});var t=r(5773),a=r(7378),o=r(6457),u=r(9036),l=r(8944),i="tabItem_WhCL";function c(e){var n,r,o,c=e.lazy,s=e.block,p=e.defaultValue,f=e.values,d=e.groupId,m=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=f?f:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,u.lx)(b,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===p?p:null!=(n=null!=p?p:null==(r=v.find((function(e){return e.props.default})))?void 0:r.props.value)?n:null==(o=v[0])?void 0:o.props.value;if(null!==h&&!b.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,u.UB)(),k=g.tabGroupChoices,w=g.setTabGroupChoices,T=(0,a.useState)(h),A=T[0],C=T[1],P=[],x=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var O=k[d];null!=O&&O!==A&&b.some((function(e){return e.value===O}))&&C(O)}var R=function(e){var n=e.currentTarget,r=P.indexOf(n),t=b[r].value;t!==A&&(x(n),C(t),null!=d&&w(d,t))},E=function(e){var n,r=null;switch(e.key){case"ArrowRight":var t=P.indexOf(e.currentTarget)+1;r=P[t]||P[0];break;case"ArrowLeft":var a=P.indexOf(e.currentTarget)-1;r=P[a]||P[P.length-1]}null==(n=r)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},m)},b.map((function(e){var n=e.value,r=e.label,o=e.attributes;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:A===n?0:-1,"aria-selected":A===n,key:n,ref:function(e){return P.push(e)},onKeyDown:E,onFocus:R,onClick:R},o,{className:(0,l.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":A===n})}),null!=r?r:n)}))),c?(0,a.cloneElement)(v.filter((function(e){return e.props.value===A}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==A})}))))}function s(e){var n=(0,o.Z)();return a.createElement(c,(0,t.Z)({key:String(n)},e))}},4718:function(e,n,r){r.r(n),r.d(n,{assets:function(){return f},contentTitle:function(){return s},default:function(){return v},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var t=r(5773),a=r(808),o=(r(7378),r(5318)),u=(r(1884),r(637)),l=r(517),i=["components"],c={sidebar_position:40,title:"Randomness"},s=void 0,p={unversionedId:"developers/randomness",id:"developers/randomness",title:"Randomness",description:"\x3c!--",source:"@site/docs/developers/randomness.mdx",sourceDirName:"developers",slug:"/developers/randomness",permalink:"/developers/randomness",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40,title:"Randomness"},sidebar:"tutorialSidebar",previous:{title:"Data Feeds",permalink:"/developers/feed"},next:{title:"Buffer Relayers",permalink:"/developers/buffer-relayer"}},f={},d=[{value:"Reading a VRF Account",id:"reading-a-vrf-account",level:2},{value:"Creating a VRF Account",id:"creating-a-vrf-account",level:2},{value:"Request Randomness",id:"request-randomness",level:2}],m={toc:d};function v(e){var n=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"reading-a-vrf-account"},"Reading a VRF Account"),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"Rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use switchboard_v2::VrfAccountData;\n\nlet vrf = VrfAccountData::new(vrf_account_info)?;\nlet result_buffer = vrf.get_result()?;\nif result_buffer == [0u8; 32] {\n    msg!("vrf buffer empty");\n    return Ok(());\n}\n\nlet value: &[u128] = bytemuck::cast_slice(&result_buffer[..]);\nlet result = value[0] % 256000 as u128;\n'))),(0,o.kt)(l.Z,{value:"Typescript",label:"Typescript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  VrfAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst vrfAccount = new VrfAccount({\n  program,\n  publicKey: vrfKey,\n});\nconst vrf = await vrfAccount.loadData();\nconsole.log(vrf.currentRound.result);\n'))),(0,o.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 vrf print VRFKEY\n# OR\nsbv2 vrf watch VRFKEY\n")))),(0,o.kt)("h2",{id:"creating-a-vrf-account"},"Creating a VRF Account"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"vrfInit"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  OracleQueueAccount,\n  PermissionAccount,\n  SwitchboardPermission,\n  VrfAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\nconst queueAccount = new queueAccount({ program, publicKey: queueKey });\nconst queue = await queueAccount.loadData();\n\n// load client program used for callback\nconst vrfClientProgram = anchor.workspace\n  .AnchorVrfParser as anchor.Program<AnchorVrfParser>;\nconst vrfSecret = anchor.web3.Keypair.generate();\n\nconst vrfIxCoder = new anchor.BorshInstructionCoder(vrfClientProgram.idl);\nconst vrfClientCallback: Callback = {\n  programId: vrfClientProgram.programId,\n  accounts: [\n    // ensure all accounts in updateResult are populated\n    { pubkey: vrfClientKey, isSigner: false, isWritable: true },\n    { pubkey: vrfSecret.publicKey, isSigner: false, isWritable: false },\n  ],\n  ixData: vrfIxCoder.encode("updateResult", ""), // pass any params for instruction here\n};\n\n// create VRF\nconst vrfAccount = await VrfAccount.create(program, {\n  queue: queueAccount,\n  callback: vrfClientCallback,\n  authority: vrfClientKey, // vrf authority\n  keypair: vrfSecret,\n});\n\n// create permission\nconst permissionAccount = await PermissionAccount.create(program, {\n  authority: queue.authority,\n  granter: queue.publicKey,\n  grantee: vrfAccount.publicKey,\n});\n\n// if queue has not enabled unpermissionedVrfEnabled, queue will need to grant permission\nlet queueAuthority: Keypair;\nawait permissionAccount.set({\n  authority: queueAuthority,\n  permission: SwitchboardPermission.PERMIT_VRF_REQUESTS,\n  enable: true,\n});\n'))),(0,o.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 vrf create QUEUEKEY \\\n    --keypair "path/to/payer/keypair.json" \\\n    --authority "path/to/authority/keypair.json" \\\n    --queueAuthority "path/to/queue-authority/keypair.json" \\\n    --vrfKeypair vrf-keypair.json \\\n    --callbackPid CALLBACKPROGRAMID \\\n    --ixData "[145,72,9,94,61,97,126,106]" \\\n    -a "{\\"pubkey\\": \\"C7PVykaTT8xDt8D1bugNvAJP1mJnfK5h12PuqgghmCDZ\\",\\"isSigner\\": false,\\"isWritable\\": true}" \\\n    -a "{\\"pubkey\\": \\"BV7TXpXtnzYCFjoQCeGx8iMgfi9WB38tmirrDkun8P38\\",\\"isSigner\\": false,\\"isWritable\\": false}" \\\n    --enable \\\n    --verbose\n')))),(0,o.kt)("h2",{id:"request-randomness"},"Request Randomness"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"vrfRequestRandomness"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  VrfAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet authority: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst vrfAccount = new VrfAccount({\n  program,\n  publicKey: vrfKey,\n});\nconst vrf = await vrfAccount.loadData();\n\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: vrf.queuePubkey,\n});\nconst queue = await queueAccount.loadData();\nconst mint = await queueAccount.loadMint();\n\nconst payerTokenWallet = = (\n  await mint.getOrCreateAssociatedAccountInfo(payer.publicKey)\n).address;\n\nconst signature = await vrfAccount.requestRandomness({\n  authority,\n  payer: payerTokenWallet,\n  payerAuthority: payer,\n});\n'))),(0,o.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 vrf request VRFKEY \\\n    --keypair "path/to/payer/keypair.json"\n')))))}v.isMDXComponent=!0}}]);