"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9992],{5318:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},l=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=i(t),m=a,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||o;return t?r.createElement(d,u(u({ref:n},l),{},{components:t})):r.createElement(d,u({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,u=new Array(o);u[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,u[1]=c;for(var i=2;i<o;i++)u[i]=t[i];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},517:function(e,n,t){t.d(n,{Z:function(){return a}});var r=t(7378);function a(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},637:function(e,n,t){t.d(n,{Z:function(){return l}});var r=t(5773),a=t(7378),o=t(6457),u=t(9036),c=t(8944),s="tabItem_WhCL";function i(e){var n,t,o,i=e.lazy,l=e.block,p=e.defaultValue,f=e.values,m=e.groupId,d=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=f?f:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,u.lx)(y,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===p?p:null!=(n=null!=p?p:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=b[0])?void 0:o.props.value;if(null!==h&&!y.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=(0,u.UB)(),g=_.tabGroupChoices,k=_.setTabGroupChoices,w=(0,a.useState)(h),A=w[0],x=w[1],T=[],R=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var q=g[m];null!=q&&q!==A&&y.some((function(e){return e.value===q}))&&x(q)}var C=function(e){var n=e.currentTarget,t=T.indexOf(n),r=y[t].value;r!==A&&(R(n),x(r),null!=m&&k(m,r))},P=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=T.indexOf(e.currentTarget)+1;t=T[r]||T[0];break;case"ArrowLeft":var a=T.indexOf(e.currentTarget)-1;t=T[a]||T[T.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":l},d)},y.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:A===n?0:-1,"aria-selected":A===n,key:n,ref:function(e){return T.push(e)},onKeyDown:P,onFocus:C,onClick:C},o,{className:(0,c.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":A===n})}),null!=t?t:n)}))),i?(0,a.cloneElement)(b.filter((function(e){return e.props.value===A}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==A})}))))}function l(e){var n=(0,o.Z)();return a.createElement(i,(0,r.Z)({key:String(n)},e))}},4718:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return l},default:function(){return b},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var r=t(5773),a=t(808),o=(t(7378),t(5318)),u=(t(1884),t(637)),c=t(517),s=["components"],i={sidebar_position:40,title:"Randomness"},l=void 0,p={unversionedId:"developers/randomness",id:"developers/randomness",title:"Randomness",description:"\x3c!--",source:"@site/docs/developers/randomness.mdx",sourceDirName:"developers",slug:"/developers/randomness",permalink:"/developers/randomness",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40,title:"Randomness"},sidebar:"tutorialSidebar",previous:{title:"Data Feeds",permalink:"/developers/feed"},next:{title:"Buffer Relayers",permalink:"/developers/buffer-relayer"}},f={},m=[{value:"Reading a VRF Account",id:"reading-a-vrf-account",level:2},{value:"Creating a VRF Account",id:"creating-a-vrf-account",level:2},{value:"Request Randomness",id:"request-randomness",level:2}],d={toc:m};function b(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"reading-a-vrf-account"},"Reading a VRF Account"),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use switchboard_v2::VrfAccountData;\n\nlet vrf = VrfAccountData::new(vrf_account_info)?;\nlet result_buffer = vrf.get_result()?;\nif result_buffer == [0u8; 32] {\n    msg!("vrf buffer empty");\n    return Ok(());\n}\n\nlet value: &[u128] = bytemuck::cast_slice(&result_buffer[..]);\nlet result = value[0] % 256000 as u128;\n'))),(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  VrfAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst vrfAccount = new VrfAccount({\n  program,\n  publicKey: vrfKey,\n});\nconst vrf = await vrfAccount.loadData();\nconsole.log(vrf.currentRound.result);\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 vrf print VRFKEY\n# OR\nsbv2 vrf watch VRFKEY\n")))),(0,o.kt)("h2",{id:"creating-a-vrf-account"},"Creating a VRF Account"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"vrfInit"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  OracleQueueAccount,\n  PermissionAccount,\n  SwitchboardPermission,\n  VrfAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\nconst queueAccount = new queueAccount({ program, publicKey: queueKey });\nconst queue = await queueAccount.loadData();\n\n// load client program used for callback\nconst vrfClientProgram = anchor.workspace\n  .AnchorVrfParser as anchor.Program<AnchorVrfParser>;\nconst vrfSecret = anchor.web3.Keypair.generate();\n\nconst vrfIxCoder = new anchor.BorshInstructionCoder(vrfClientProgram.idl);\nconst vrfClientCallback: Callback = {\n  programId: vrfClientProgram.programId,\n  accounts: [\n    // ensure all accounts in updateResult are populated\n    { pubkey: vrfClientKey, isSigner: false, isWritable: true },\n    { pubkey: vrfSecret.publicKey, isSigner: false, isWritable: false },\n  ],\n  ixData: vrfIxCoder.encode("updateResult", ""), // pass any params for instruction here\n};\n\n// create VRF\nconst vrfAccount = await VrfAccount.create(program, {\n  queue: queueAccount,\n  callback: vrfClientCallback,\n  authority: vrfClientKey, // vrf authority\n  keypair: vrfSecret,\n});\n\n// create permission\nconst permissionAccount = await PermissionAccount.create(program, {\n  authority: queue.authority,\n  granter: queue.publicKey,\n  grantee: vrfAccount.publicKey,\n});\n\n// if queue has not enabled unpermissionedVrfEnabled, queue will need to grant permission\nlet queueAuthority: Keypair;\nawait permissionAccount.set({\n  authority: queueAuthority,\n  permission: SwitchboardPermission.PERMIT_VRF_REQUESTS,\n  enable: true,\n});\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 vrf create QUEUEKEY \\\n    --keypair "path/to/payer/keypair.json" \\\n    --authority "path/to/authority/keypair.json" \\\n    --queueAuthority "path/to/queue-authority/keypair.json" \\\n    --vrfKeypair vrf-keypair.json \\\n    --callbackPid CALLBACKPROGRAMID \\\n    --ixData "[145,72,9,94,61,97,126,106]" \\\n    -a "{\\"pubkey\\": \\"C7PVykaTT8xDt8D1bugNvAJP1mJnfK5h12PuqgghmCDZ\\",\\"isSigner\\": false,\\"isWritable\\": true}" \\\n    -a "{\\"pubkey\\": \\"BV7TXpXtnzYCFjoQCeGx8iMgfi9WB38tmirrDkun8P38\\",\\"isSigner\\": false,\\"isWritable\\": false}" \\\n    --enable \\\n    --verbose\n')))),(0,o.kt)("h2",{id:"request-randomness"},"Request Randomness"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"vrfRequestRandomness"))),(0,o.kt)(u.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"Rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use crate::*;\nuse anchor_lang::prelude::*;\npub use switchboard_v2::{VrfAccountData, VrfRequestRandomness};\nuse anchor_spl::token::Token;\nuse anchor_lang::solana_program::clock;\n\n#[derive(Accounts)]\n#[instruction(params: RequestResultParams)] // rpc parameters hint\npub struct RequestResult<'info> {\n    #[account(\n        mut,\n        seeds = [\n            STATE_SEED,\n            vrf.key().as_ref(),\n            authority.key().as_ref(),\n        ],\n        bump = state.load()?.bump,\n        has_one = vrf,\n        has_one = authority\n    )]\n    pub state: AccountLoader<'info, VrfClient>,\n    #[account(signer)]\n    pub authority: AccountInfo<'info>,\n    #[account(constraint = switchboard_program.executable == true)]\n    pub switchboard_program: AccountInfo<'info>,\n    #[account(mut, constraint = vrf.owner.as_ref() == switchboard_program.key().as_ref())]\n    pub vrf: AccountInfo<'info>,\n    #[account(mut, constraint = oracle_queue.owner.as_ref() == switchboard_program.key().as_ref())]\n    pub oracle_queue: AccountInfo<'info>,\n    pub queue_authority: UncheckedAccount<'info>,\n    #[account(constraint = data_buffer.owner.as_ref() == switchboard_program.key().as_ref())]\n    pub data_buffer: AccountInfo<'info>,\n    #[account(mut, constraint = permission.owner.as_ref() == switchboard_program.key().as_ref())]\n    pub permission: AccountInfo<'info>,\n    #[account(mut, constraint = escrow.owner == program_state.key())]\n    pub escrow: Account<'info, TokenAccount>,\n    #[account(mut, constraint = payer_wallet.owner == payer_authority.key())]\n    pub payer_wallet: Account<'info, TokenAccount>,\n    #[account(signer)]\n    pub payer_authority: AccountInfo<'info>,\n    #[account(address = solana_program::sysvar::recent_blockhashes::ID)]\n    pub recent_blockhashes: AccountInfo<'info>,\n    #[account(constraint = program_state.owner.as_ref() == switchboard_program.key().as_ref())]\n    pub program_state: AccountInfo<'info>,\n    #[account(address = anchor_spl::token::ID)]\n    pub token_program: Program<'info, Token>,\n}\n\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct RequestResultParams {\n    pub permission_bump: u8,\n    pub switchboard_state_bump: u8,\n}\n\nimpl RequestResult<'_> {\n    pub fn validate(&self, _ctx: &Context<Self>, _params: &RequestResultParams) -> Result<()> {\n        Ok(())\n    }\n\n    pub fn actuate(ctx: &Context<Self>, params: &RequestResultParams) -> Result<()> {\n        let client_state = ctx.accounts.state.load()?;\n        let bump = client_state.bump.clone();\n        let max_result = client_state.max_result.clone();\n        drop(client_state);\n\n        let switchboard_program = ctx.accounts.switchboard_program.to_account_info();\n\n        let vrf_request_randomness = VrfRequestRandomness {\n            authority: ctx.accounts.state.to_account_info(),\n            vrf: ctx.accounts.vrf.to_account_info(),\n            oracle_queue: ctx.accounts.oracle_queue.to_account_info(),\n            queue_authority: ctx.accounts.queue_authority.to_account_info(),\n            data_buffer: ctx.accounts.data_buffer.to_account_info(),\n            permission: ctx.accounts.permission.to_account_info(),\n            escrow: ctx.accounts.escrow.clone(),\n            payer_wallet: ctx.accounts.payer_wallet.clone(),\n            payer_authority: ctx.accounts.payer_authority.to_account_info(),\n            recent_blockhashes: ctx.accounts.recent_blockhashes.to_account_info(),\n            program_state: ctx.accounts.program_state.to_account_info(),\n            token_program: ctx.accounts.token_program.to_account_info(),\n        };\n\n        let vrf_key = ctx.accounts.vrf.key.clone();\n        let authority_key = ctx.accounts.authority.key.clone();\n\n        msg!(\"bump: {}\", bump);\n        msg!(\"authority: {}\", authority_key);\n        msg!(\"vrf: {}\", vrf_key);\n\n        let state_seeds: &[&[&[u8]]] = &[&[\n            &STATE_SEED,\n            vrf_key.as_ref(),\n            authority_key.as_ref(),\n            &[bump],\n        ]];\n        msg!(\"requesting randomness\");\n        vrf_request_randomness.invoke_signed(\n            switchboard_program,\n            params.switchboard_state_bump,\n            params.permission_bump,\n            state_seeds,\n        )?;\n\n        emit!(RequestingRandomness{\n            vrf_client: ctx.accounts.state.key(),\n            max_result: max_result,\n            timestamp: clock::Clock::get().unwrap().unix_timestamp\n        });\n\n        msg!(\"randomness requested successfully\");\n        Ok(())\n    }\n}\n\n"))),(0,o.kt)(c.Z,{value:"Typescript",label:"Typescript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  VrfAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet authority: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst vrfAccount = new VrfAccount({\n  program,\n  publicKey: vrfKey,\n});\nconst vrf = await vrfAccount.loadData();\n\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: vrf.queuePubkey,\n});\nconst queue = await queueAccount.loadData();\nconst mint = await queueAccount.loadMint();\n\nconst payerTokenWallet = = (\n  await mint.getOrCreateAssociatedAccountInfo(payer.publicKey)\n).address;\n\nconst signature = await vrfAccount.requestRandomness({\n  authority,\n  payer: payerTokenWallet,\n  payerAuthority: payer,\n});\n'))),(0,o.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 vrf request VRFKEY \\\n    --keypair "path/to/payer/keypair.json"\n')))),"```")}b.isMDXComponent=!0}}]);