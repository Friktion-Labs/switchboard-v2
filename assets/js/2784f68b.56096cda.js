"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1457],{5318:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(r),h=a,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||o;return r?n.createElement(m,l(l({ref:t},u),{},{components:r})):n.createElement(m,l({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},517:function(e,t,r){r.d(t,{Z:function(){return a}});var n=r(7378);function a(e){var t=e.children,r=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:r,className:a},t)}},637:function(e,t,r){r.d(t,{Z:function(){return u}});var n=r(2685),a=r(7378),o=r(6457),l=r(1582),i=r(8944),c="tabItem_WhCL";function s(e){var t,r,o,s=e.lazy,u=e.block,d=e.defaultValue,p=e.values,h=e.groupId,m=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=p?p:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,l.lx)(b,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===d?d:null!=(t=null!=d?d:null==(r=v.find((function(e){return e.props.default})))?void 0:r.props.value)?t:null==(o=v[0])?void 0:o.props.value;if(null!==w&&!b.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,l.UB)(),g=y.tabGroupChoices,k=y.setTabGroupChoices,T=(0,a.useState)(w),N=T[0],S=T[1],x=[],E=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var O=g[h];null!=O&&O!==N&&b.some((function(e){return e.value===O}))&&S(O)}var C=function(e){var t=e.currentTarget,r=x.indexOf(t),n=b[r].value;n!==N&&(E(t),S(n),null!=h&&k(h,n))},I=function(e){var t,r=null;switch(e.key){case"ArrowRight":var n=x.indexOf(e.currentTarget)+1;r=x[n]||x[0];break;case"ArrowLeft":var a=x.indexOf(e.currentTarget)-1;r=x[a]||x[x.length-1]}null==(t=r)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},m)},b.map((function(e){var t=e.value,r=e.label,o=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:function(e){return x.push(e)},onKeyDown:I,onFocus:C,onClick:C},o,{className:(0,i.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":N===t})}),null!=r?r:t)}))),s?(0,a.cloneElement)(v.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}function u(e){var t=(0,o.Z)();return a.createElement(s,(0,n.Z)({key:String(t)},e))}},3658:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return h}});var n=r(2685),a=r(1244),o=(r(7378),r(5318)),l=r(637),i=r(517),c=["components"],s={sidebar_position:5,title:"Localnet Integration"},u=void 0,d={unversionedId:"developers/localnet",id:"developers/localnet",title:"Localnet Integration",description:"You may wish to run a localnet version of Switchboard to watch how your program reacts to data feed updates. The following will walk through how to create your own Oracle Queue and Oracle and output some helper scripts to quickly load the environment in your tests.",source:"@site/docs/developers/localnet.mdx",sourceDirName:"developers",slug:"/developers/localnet",permalink:"/developers/localnet",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Localnet Integration"},sidebar:"tutorialSidebar",previous:{title:"Developer Resources",permalink:"/developers/"},next:{title:"Oracle Queue",permalink:"/developers/queue"}},p={},h=[{value:"Setup Switchboard Test Environment",id:"setup-switchboard-test-environment",level:2},{value:"Switchboard Test Context",id:"switchboard-test-context",level:2},{value:"Starting Test",id:"starting-test",level:3},{value:"loadFromEnv",id:"loadfromenv",level:3},{value:"createStaticFeed",id:"createstaticfeed",level:3}],m={toc:h};function v(e){var t=e.components,r=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You may wish to run a localnet version of Switchboard to watch how your program reacts to data feed updates. The following will walk through how to create your own Oracle Queue and Oracle and output some helper scripts to quickly load the environment in your tests."),(0,o.kt)("h2",{id:"setup-switchboard-test-environment"},"Setup Switchboard Test Environment"),(0,o.kt)("p",null,"The following will create an Oracle Queue and Oracle with the provided keypair as the authority"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"CLI",label:"CLI",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'sbv2 localnet:env \\\n    --keypair "../payer-keypair.json" \\\n    --outputDir ".switchboard"\n'))),(0,o.kt)(i.Z,{value:"Typescript",label:"Typescript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { SwitchboardTestEnvironment } from "@switchboard-xyz/sbv2-utils";\n\nconst testEnvironment = await SwitchboardTestEnvironment.create(\n  "../payer-keypair.json"\n);\ntestEnvironment.writeAll(".switchboard");\n')))),(0,o.kt)("p",null,"In the specified ",(0,o.kt)("inlineCode",{parentName:"p"},"outputDir"),", you will find:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"start-local-validator.sh"),": Bash script which starts a local Solana validator with the Switchboard program, IDL, and our devnet environment pre-loaded"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"start-oracle.sh"),": Bash script which starts a Switchboard oracle and start heartbeating on the localnet queue"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"docker-compose.switchboard.yml"),": docker file with the Switchboard oracle environment"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"switchboard.env"),": Env file with your Switchboard account public keys"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"switchboard.json"),": JSON file with your Switchboard account public keys")),(0,o.kt)("h2",{id:"switchboard-test-context"},"Switchboard Test Context"),(0,o.kt)("p",null,"In your tests, you will need to load the ",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard.env")," file to build the SwitchboardTestContext."),(0,o.kt)("h3",{id:"starting-test"},"Starting Test"),(0,o.kt)("p",null,"Before you run your test you will need a localnet Solana validator running with the Switchboard-V2 program loaded and your Switchboard oracle running and heartbeating."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"In Shell #1"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./.switchboard/start-local-validator.sh\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"In Shell #2"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./.switchboard/start-oracle.sh\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"In Shell #3"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"anchor test --skip-local-validator\n")),(0,o.kt)("h3",{id:"loadfromenv"},"loadFromEnv"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SwitchboardTestContext.loadFromEnv")," will look for ",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard.env")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},".switchboard")," directory in the current directory or three levels up before throwing an error."),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as anchor from "@project-serum/anchor";\nimport { SwitchboardTestContext } from "@switchboard-xyz/sbv2-utils";\nimport chai from "chai";\nimport "mocha";\n\ndescribe("switchboard integration test", async () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  let switchboard: SwitchboardTestContext;\n\n  before(async () => {\n    // Optional, attempt to load the switchboard devnet PID\n    // If successful, then we can assume we\'re on devnet and can use the public permissionless queue\n    try {\n      switchboard = await SwitchboardTestContext.loadDevnetQueue(provider);\n      console.log("devnet detected");\n      return;\n    } catch (error: any) {\n      console.log("Error: SBV2 Devnet - ", error.message);\n    }\n\n    // Attempt to load switchboard.env or .switchboard directory\n    // Will look 3 levels up before failing\n    try {\n      switchboard = await SwitchboardTestContext.loadFromEnv(provider);\n      console.log("localnet detected");\n      return;\n    } catch (error: any) {\n      console.log("Error: SBV2 Localnet - ", error.message);\n    }\n\n    // If fails, throw error\n    throw new Error(\n      "Failed to load the SwitchboardTestContext from devnet or from a switchboard.env file"\n    );\n  });\n\n  it("Your test here", async () => {});\n});\n')))),(0,o.kt)("h3",{id:"createstaticfeed"},"createStaticFeed"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as anchor from "@project-serum/anchor";\nimport { SwitchboardTestContext } from "@switchboard-xyz/sbv2-utils";\nimport { AggregatorAccount } from "@switchboard-xyz/switchboard-v2";\n\n// load the Switchboard env to dictate which queue to create feed for\nconst switchboard = await SwitchboardTestContext.loadFromEnv(\n  anchor.AnchorProvider.env()\n);\n\n// create a static feed that will always resolve to 100\n// then call openRound and wait for the oracle to process the update\nconst aggregatorAccount: AggregatorAccount = await switchboard.createStaticFeed(\n  100\n);\n')))))}v.isMDXComponent=!0}}]);