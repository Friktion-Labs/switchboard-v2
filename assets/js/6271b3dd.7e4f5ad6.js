"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6945],{5318:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var a=r(7378);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),v=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},p=function(e){var t=v(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=v(r),f=n,y=s["".concat(l,".").concat(f)]||s[f]||c[f]||i;return r?a.createElement(y,u(u({ref:t},p),{},{components:r})):a.createElement(y,u({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,u=new Array(i);u[0]=s;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,u[1]=o;for(var v=2;v<i;v++)u[v]=r[v];return a.createElement.apply(null,u)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},7047:function(e,t,r){r.r(t),r.d(t,{assets:function(){return f},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return y}});var a=r(5773),n=r(808),i=(r(7378),r(5318)),u=["components"],o={toc:[{value:"<code>sbv2 vrf create [QUEUEKEY]</code>",id:"sbv2-vrf-create-queuekey",level:2},{value:"<code>sbv2 vrf create example [QUEUEKEY]</code>",id:"sbv2-vrf-create-example-queuekey",level:2},{value:"<code>sbv2 vrf print [VRFKEY]</code>",id:"sbv2-vrf-print-vrfkey",level:2},{value:"<code>sbv2 vrf request [VRFKEY]</code>",id:"sbv2-vrf-request-vrfkey",level:2},{value:"<code>sbv2 vrf watch [VRFKEY]</code>",id:"sbv2-vrf-watch-vrfkey",level:2}]};function l(e){var t=e.components,r=(0,n.Z)(e,u);return(0,i.kt)("wrapper",(0,a.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"create a Switchboard VRF Account"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrf-create-queuekey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf create [QUEUEKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrf-create-example-queuekey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf create example [QUEUEKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrf-print-vrfkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf print [VRFKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrf-request-vrfkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf request [VRFKEY]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sbv2-vrf-watch-vrfkey"},(0,i.kt)("inlineCode",{parentName:"a"},"sbv2 vrf watch [VRFKEY]")))),(0,i.kt)("h2",{id:"sbv2-vrf-create-queuekey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf create [QUEUEKEY]")),(0,i.kt)("p",null,"create a Switchboard VRF Account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ sbv2 vrf create [QUEUEKEY] -a <value> --callbackPid <value> --ixData <value> [-v] [-s] [--mainnetBeta] [-u\n    <value>] [--programId <value>] [-k <value>] [--vrfKeypair <value>] [--enable] [--authority <value>]\n    [--queueAuthority <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nFLAGS\n  -a, --accountMeta=<value>...  (required) account metas for VRF callback\n  -k, --keypair=<value>         keypair that will pay for onchain transactions. defaults to new account authority if no\n                                alternate authority provided\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --authority=<value>           alternative keypair to use for VRF authority\n  --callbackPid=<value>         (required) callback program ID\n  --enable                      enable vrf permissions\n  --ixData=<value>              (required) instruction data\n  --mainnetBeta                 WARNING: use mainnet-beta solana cluster\n  --programId=<value>           alternative Switchboard program ID to interact with\n  --queueAuthority=<value>      alternative keypair to use for queue authority\n  --vrfKeypair=<value>          filesystem path of existing keypair to use for VRF Account\n\nDESCRIPTION\n  create a Switchboard VRF Account\n\nEXAMPLES\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"\n\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority oracle-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HYKi1grticLXPe5vqapUHhm976brwqRob8vqRnWMKWL5","isSigner": false,"isWritable": true}" -a "{"pubkey": "6vG9QLMgSvsfjvSpDxWfZ2MGPYGzEYoBxviLG7cr4go","isSigner": false,"isWritable": false}"\n')),(0,i.kt)("h2",{id:"sbv2-vrf-create-example-queuekey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf create example [QUEUEKEY]")),(0,i.kt)("p",null,"create a VRF account for the client example program"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf create example [QUEUEKEY] --vrfPid <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [--vrfKeypair <value>] [--enable] [--queueAuthority <value>] [--maxResult <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nFLAGS\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --enable                  enable vrf permissions\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --maxResult=<value>       [default: 256000] the maximum VRF result\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --vrfKeypair=<value>      filesystem path of existing keypair to use for VRF Account\n  --vrfPid=<value>          (required) program ID for the VRF example program\n\nDESCRIPTION\n  create a VRF account for the client example program\n\nEXAMPLES\n  $ sbv2 vrf:create:example 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --vrfPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json\n")),(0,i.kt)("h2",{id:"sbv2-vrf-print-vrfkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf print [VRFKEY]")),(0,i.kt)("p",null,"Print the deserialized Switchboard VRF account"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf print [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard VRF account\n\nALIASES\n  $ sbv2 vrf print\n\nEXAMPLES\n  $ sbv2 vrf:print\n")),(0,i.kt)("h2",{id:"sbv2-vrf-request-vrfkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf request [VRFKEY]")),(0,i.kt)("p",null,"request a new value for a VRF"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ sbv2 vrf request [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--funderAuthority <value>] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account to request randomness for\n\nFLAGS\n  -k, --keypair=<value>      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n  -s, --silent               suppress cli prompts\n  -u, --rpcUrl=<value>       alternate RPC url\n  -v, --verbose              log everything\n  --authority=<value>        alternative keypair that is the VRF authority\n  --funderAuthority=<value>  alternative keypair to pay for VRF request\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n  --programId=<value>        alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new value for a VRF\n\nEXAMPLES\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"\n')),(0,i.kt)("h2",{id:"sbv2-vrf-watch-vrfkey"},(0,i.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf watch [VRFKEY]")),(0,i.kt)("p",null,"watch a vrf for a new value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf watch [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch a vrf for a new value\n\nALIASES\n  $ sbv2 vrf watch\n\nEXAMPLES\n  $ sbv2 vrf:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa\n")))}l.isMDXComponent=!0;var v=["components"],p={sidebar_position:80,title:"sbv2 vrf"},c=void 0,s={unversionedId:"cli/vrf",id:"cli/vrf",title:"sbv2 vrf",description:"",source:"@site/api/cli/vrf.mdx",sourceDirName:"cli",slug:"/cli/vrf",permalink:"/api/cli/vrf",tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80,title:"sbv2 vrf"},sidebar:"tutorialSidebar",previous:{title:"sbv2 queue",permalink:"/api/cli/queue"},next:{title:"sbv2 update",permalink:"/api/cli/update"}},f={},y=[],b={toc:y};function d(e){var t=e.components,r=(0,n.Z)(e,v);return(0,i.kt)("wrapper",(0,a.Z)({},b,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(l,{mdxType:"Sbv2Vrf"}))}d.isMDXComponent=!0}}]);